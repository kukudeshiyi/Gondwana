// vue 的响应式以及编译
// react 的 diff 算法以及事件处理机制
// react 的 diff 算法为了尽量优化设置了三个限制：1、只比较同级的元素；2、元素的类型发生变化，直接销毁子树；3、通过添加 key 来联系更新前后的元素
// react 的 diff 对于同级节点存在两种情况，一种是只有一个节点，另一种是多个节点
// 对于只有一个节点的 diff，先比较 key，再比较 type，都相同就可以复用。如果 key 不相同，则不再进行比较。
// 对于存在多个节点的 diff，react 会通过两轮遍历来完成。因为 react 的树形结构，同级之间只有单向连接，导致并不能使用双指针来进行优化。所以只能使用两次遍历来完成。
// 第一次遍历，从头开始比较，做出复用、标记清除等操作。第一遍遍历结束之后，会存在几种情况。
// 新旧都遍历完了，那就没什么事情了。
// 新的遍历完了，旧的没有，那把旧的标记清除就好了。
// 旧的遍历完了，新的没有，那就创建新的就好了。
// 最后一种情况，新旧都没遍历完，这种就需要判断节点的如何移动
// 那就需要把剩余的节点做成 Map<key,node>，这样遍历新节点寻找旧节点中可复用的节点。通过以最后一个可复用节点的lastIndex为基准，后面的节点如果 oldIndex 大于等于 lastIndex，则不做移动，如果 oldIndex 小于 lastIndex ，则向右移动。
