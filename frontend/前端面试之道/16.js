// webpack 的性能优化
// 一是减少打包时间，二是缩小包的体积

// 减少打包时间
// 那就尽量缩小 webpack 的工程量，或者提高 webpack 的工程速率
// 通过缓存或者缩小搜寻范围或者减少生成代码的精细程度（比如 sourcemap）来缩短工程量，可以预打包第三方依赖，后续不必再打包（dev阶段）。通过插件使得 webpack 可以进行多线程打包

// 缩小包体积
// tree shaking 去除死代码，压缩图片、css、js等各种资源，再就是代码拆分，压缩首屏加载包体积

// 实现小型打包工具
// 解析入口文件，转化为 ast ，寻找依赖，并降级代码。然后递归解析依赖，重复上述操作。形成一个 module graph
// 根据 module graph 处理代码，最后形成自执行函数的可执行文件
